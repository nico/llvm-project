import("//compiler-rt/target.gni")
import("//compiler-rt/test/test.gni")
import("//llvm/utils/gn/build/toolchain/compiler.gni")
import("//llvm/utils/gn/build/write_cmake_config.gni")
import("//llvm/version.gni")

write_cmake_config("lit_site_cfg") {
  input = "lit.site.cfg.py.in"
  output = "$target_gen_dir/lit.site.cfg.py"

  values = [
    "LIT_SITE_CFG_IN_HEADER=## Autogenerated from $input, do not edit",

    "BUILTINS_TEST_APPLE_PLATFORM=osx",

    "COMPILER_RT_BINARY_DIR=" + rebase_path("$root_gen_dir/compiler-rt"),
    "BUILTINS_LIT_SOURCE_DIR=" + rebase_path("."),
  ]
}

supported_toolchains = []
if (host_os == "linux" && host_cpu == "x64") {
  supported_toolchains += [ "//llvm/utils/gn/build/toolchain:stage2_unix" ]
}

group("builtins") {
  deps = []
  foreach(toolchain, supported_toolchains) {
    deps += [ ":hwasan_toolchain($toolchain)" ]
  }
}

if (supported_toolchains != []) {
  action("check-builtins") {
    script = "$root_build_dir/bin/llvm-lit"
    if (host_os == "win") {
      script += ".py"
    }
    args = [ "-sv" ]
    foreach(toolchain, supported_toolchains) {
      args += [ rebase_path(
              get_label_info(":lit_site_cfg($toolchain)", "target_gen_dir"),
              root_build_dir) ]
    }
    outputs = [
      "$target_gen_dir/run-lit",  # Non-existing, so that ninja runs each time.
    ]

    # Since check-hwasan is always dirty, //:default doesn't depend on it so that
    # it's not part of the default ninja target.  Hence, check-hwasan shouldn't
    # have any deps except :hwasan. so that the default target is sure to build
    # all the deps.
    deps = [
      ":hwasan",
    ]
    testonly = true

    pool = "//:console"
  }
}
